更新引用字段时，通过屏障将对应的卡表项标记为脏
The expression stack grows down incrementally, so the normal guard page mechanism will work for that

内存分配和回收，new指令(在基础篇)
synchronized锁和monitor指令

自研备注:
锁机制
OopMark  偏向(UseBiasedLocking太复杂)
BasicObjectLock 轻量级
ObjectMonitor  重量级(包含自旋)

异常机制
athrow
throw xxx exception entry from bytecode asm
asm inst: test/comp SIGSEGV (只有这里用到了信号)

xxx exception handler(throw xxx exception entry) => create_exception, jump _throw_exception_entry
                                                 => throw_exception
InterpreterRuntime::create_exception => thread->set_vm_result
InterpreterRuntime::throw_exception => THROW => thread->set_pending_exception (call_VM_base check pending exception and jump forward_exception_entry)
athrow => jump _throw_exception_entry
_throw_exception_entry => jump return of exception_handler_for_exception => the bci address of exception handler table in current java method
                                                                         => _remove_activation_entry => jump return of exception_handler_for_return_address => _rethrow_exception_entry (include _throw_exception_entry asm code)
StubRoutines::forward_exception_entry => jump return of SharedRuntime::exception_handler_for_return_address
JVM_handle_linux_signal => throw xxx exception entry
InterpreterRuntime::throw_pending_exception do nothing

安全点机制
解析执行进入安全点: InterpreterRuntime::at_safepoint 后续是jvmti的逻辑(JvmtiExport::post_single_step把线程加入到待暂停的列表中，最终会调用JvmtiEnv::SuspendThread函数)
编译执行进入安全点: JVM_handle_linux_signal => SharedRuntime::get_poll_stub => SharedRuntime::polling_page_return_handler_blob()->entry_point()
native执行进入安全点: native方法执行完毕后检查是否要进入安全点 => transition_from_native => JavaThread::check_safepoint_and_suspend_for_native_trans()

memory order机制
four primitive memory barrier operations:
Load1(s); LoadLoad; Load2: Loads before Load1 may *not* float below Load2
Store1(s); StoreStore; Store2: Stores before Store1 may *not* float below Store2
Load1(s); LoadStore; Store2: Loads before Load1 may *not* float below Store2
Store1(s); StoreLoad; Load2: Stores before Store1 may *not* float below Load2

|     memory accesses      | ^
|------- release  ---------| |  StoreStore
      memory accesses -------|
|------- acquire  ---------| |  LoadLoad/LoadStore
|     memory accesses      | V
fence = release + acquire       StoreLoad
load_acquire = acquire + read variable; release_store = release + write variable; store_fence = fence + write variable
why StoreStore is release and LoadLoad/LoadStore is acquire:
normal r/w StoreStore volatile w StoreLoad
volatile r LoadLoad LoadStore normal r/w