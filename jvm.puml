@startuml
class ArrayList {
Object[] elementData
int size()
}

CppInterpreterGenerator ..|> AbstractInterpreterGenerator
TemplateInterpreterGenerator ..|> AbstractInterpreterGenerator
InterpreterGenerator ..|> CppInterpreterGenerator
note on link: define CC_INTERP_ONLY
InterpreterGenerator ..|> TemplateInterpreterGenerator
note on link: define NOT_CC_INTERP

CppInterpreter ..|> AbstractInterpreter
TemplateInterpreter ..|> AbstractInterpreter
Interpreter ..|> CppInterpreter: /#define CC_INTERP_ONLY
Interpreter ..|> TemplateInterpreter: /#define NOT_CC_INTERP

Assembler ..|> AbstractAssembler
MacroAssembler ..|> Assembler
InterpreterMacroAssembler ..|> MacroAssembler

BytecodeInterpreter ...> InterpreterRuntime
CppInterpreter ...> BytecodeInterpreter
TemplateInterpreter ...> InterpreterRuntime

Thread --|> ThreadShadow
JavaThread --|> Thread
NamedThread --|> Thread
WatcherThread --|> Thread

VMThread --|> NamedThread
ConcurrentGCThread --|> NamedThread
WorkerThread --|> NamedThread

GCTaskThread --|> WorkerThread
note top of GCTaskThread
GCTaskThread is for ParallelGC
end note

CompilerThread --|> JavaThread

Thread ...> OSThread

ResourceObj --|> AllocatedObj
StackObj --|> AllocatedObj
CHeapObj --|> AllocatedObj
CompilationResourceObj --|> AllocatedObj
note left of AllocatedObj
StackObj is allocated on stack, no new operator;
ResourceObj is allocated on arena/resource area/c heap/embedded stack ???;
CHeapObj is allocated by c heap (malloc and free);
ResourceArea is mainly in Thread;
end note

Arena --|> CHeapObj
ResourceArea --|> Arena
Chunk --|> CHeapObj
Metaspace --|> CHeapObj
CollectedHeap --|> CHeapObj
SharedHeap --|> CollectedHeap
GenCollectedHeap --|> SharedHeap
G1CollectedHeap --|> SharedHeap
Generation --|> CHeapObj
CardGeneration --|> Generation
TenuredGeneration --|> CardGeneration
ConcurrentMarkSweepGeneration --|> CardGeneration
DefNewGeneration --|> Generation

Space --|> CHeapObj
CompactibleSpace --|> Space
    CompactibleFreeListSpace --|> CompactibleSpace
    ContiguousSpace --|> CompactibleSpace
        EdenSpace --|> ContiguousSpace
        OffsetTableContigSpace --|> ContiguousSpace
            TenuredSpace --|> OffsetTableContigSpace
    G1OffsetTableContigSpace --|> CompactibleSpace
        HeapRegion --|> G1OffsetTableContigSpace

Parker ..|> PlatformParker
ParkEvent ..|> PlatformEvent
note left of PlatformParker
PlatformParker and PlatformEvent
has same facility:
pthread_cond_timedwait & pthread_cond_wait
end note

markOopDesc --|> oopDesc
instanceOopDesc ..|> oopDesc
arrayOopDesc ..|> oopDesc

note left of markOopDesc
The markOop describes
the header of an object
end note

note left of oopDesc
oopDesc is the top baseclass
for objects classes
end note

note top of instanceOopDesc
An instanceOop is an instance of a Java Class
end note

InstanceClassLoaderKlass ..|> InstanceKlass
InstanceMirrorKlass ..|> InstanceKlass
InstanceRefKlass ..|> InstanceKlass
InstanceKlass ..|> Klass
TypeArrayKlass ..|> ArrayKlass
ObjArrayKlass ..|> ArrayKlass
ArrayKlass ..|> Klass
Klass ..|> Metadata
Method ..|> Metadata
Metadata ..|> MetaspaceObj

ConstantPool ..|> Metadata
MethodData ..|> Metadata
ConstMethod ..|> MetaspaceObj
MethodCounters ..|> MetaspaceObj
ConstantPoolCache ..|> MetaspaceObj

Method ...> MethodData
Method ...> ConstMethod
ConstMethod ...> ConstantPool
ConstantPool ...> ConstantPoolCache

CodeBlob ..|> _ValueObj
nmethod ..|> CodeBlob
RuntimeStub ..|> CodeBlob
BufferBlob ..|> CodeBlob
AdapterBlob ..|> BufferBlob
SingletonBlob ..|> CodeBlob
DeoptimizationBlob ..|> SingletonBlob
SafepointBlob ..|> SingletonBlob
ExceptionBlob ..|> SingletonBlob
UncommonTrapBlob ..|> SingletonBlob

note bottom of CodeBlob
RuntimeStub: used to call a (static) C++ runtime routine
AdapterBlob: used to hold C2I/I2C adapters
ExceptionBlob: used for exception unwinding by Compiler2
UncommonTrapBlob: used for rare situation trap handling by Compiler2
end note

note as common_note
  将src.zip解压后将相应java源代码路径配置到jdk的source path中即可在idea中查看源码
  -XX:-UseStackBanging和-XX:-ProfileInterpreter，不生成栈检查和统计相关的汇编代码
  <b>global.h</b>: jvm flag 参数
  <b>javaCalls.cpp</b>: JavaCalls::call native方法中调用java方法
  <b>interpreterRuntime(解释执行的方法)、stubRoutines(编译执行的方法)、SharedRuntime(解释/编译执行的方法)
  <b>macroAssembler_x86.cpp</b>: MacroAssembler::call_VM 生成 模板解释器执行指令时(即java方法)调用native方法(interpreterRuntime的方法) 的例程的汇编代码
  <b>templateInterpreter_x86_64.cpp</b>: AbstractInterpreterGenerator::generate_method_entry generate_normal_entry generate_native_entry 生成java/native解释执行的入口
  <b>sharedRuntime_x86_64.cpp</b>: SharedRuntime::generate_native_wrapper 生成native编译执行的入口:
  InterpreterGenerator::generate_normal_entry ->
  	return address of asm code				(templateInterpreter)
  	return CppInterpreter::normal_entry     (zero)

  InterpreterGenerator::generate_native_entry ->
  	return address of asm code				(templateInterpreter)
  	return CppInterpreter::native_entry     (zero)

  assembler_x86.cpp
  globalDefinitions.hpp
  globals.hpp
  interp_masm_x86_64.cpp
  interpreterRuntime.cpp
  javaCalls.cpp
  jni.cpp
  jvm.cpp
  library_call.cpp
  macroAssembler_x86.cpp
  method.cpp
  nmethod.cpp
  sharedRuntime_x86_64.cpp
  stubGenerator_x86_64.cpp
  stubRoutines.cpp
  systemDictionary.cpp
  templateInterpreter_x86_64.cpp
  templateTable_x86_64.cpp
  x86_64.ad

  cppInterpreter_zero.cpp
  stubGenerator_zero.cpp

  <u>also</u> <color:royalBlue>on several</color> <s>words</s> lines
  Class13 --> Class14
  Class15 ..> Class16
  Class17 --|> Class18
  Class19 *--> Class20
end note
@enduml
