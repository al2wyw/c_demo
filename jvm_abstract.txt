** call_VM routine:

setup args to rdi rsi etc.
save bcp to stack
save rsp rbp to thread

call jvm native address (save res to thread) ****

clear rsp rbp from thread
check pending exceptions

move res from thread to rax
clear res from thread

move bcp local from stack to reg

** invoke_virtual routine:

setup args to stack by other inst

sub (locals num - args num)*8 from rsp

push invoke_return_entry address
resolve method and class (optional)
get receiver from cp cache
test receiver
save rsp to stack

find method target via vtable (optional)
jmp from_interpreted_entry address: ****
    leaveq by return inst (mov rbp to rsp, pop rbp)

jmp invoke_return_entry address:
    move bcp local from stack to reg
    add (args num)*8 to rsp
    jmp next bcp address

** from_interpreted_entry is i2c adapter:
move return address(tos) to rax
stack mem alignment
push return address from rax

setup args to reg and stack
save Method* to JavaThread::_callee_target
move Method* to rax
jmp from_compiled_entry address ****

** invoke_native routine:

setup args to stack by other inst

sub (args num)*8 from rsp (只用了靠栈顶几个slot)
stack mem alignment

call Method::signature_handler (return result_handler)
move result_handler from rax to stack(result handler)
get receiver from cp cache
move receiver from r11 to stack(oop temp)

move JavaThread::jni_environment to rdi
save rsp rbp last_pc to thread
move _thread_in_native to thread
call Method::native_function ****

push rax
move _thread_in_native_trans to thread
serialize_memory ???

check safe point and pending suspend requests

move _thread_in_Java to thread
clear rsp rbp last_pc from thread
clear JavaThread::active_handles::_top

check result type of result_handler is T_OBJECT
    move rsp to rax
    deref rax(type of jobject) and store it to stack(oop temp and rsp)

check stack overflow
check pending exception
check whether unlock

call result_handler
restore rsp and rbp
jmp return address
...



from_interpreted_entry 和 from_compiled_entry 都是 jmp 过去的，无论是解析和编译执行
解析和编译最终都是调用LinkResolver::resolve_invoke
方法调用是一个相对昂贵的操作，每次方法调用都需要经历查找、验证和跳转等步骤。为了优化这一过程，JVM引入了内联缓存(Inline Cache)技术
code patching 动态二进制插桩技术

CompiledIC通过code patching把 caller(last frame) 的pc改成call method entry address(UEP)，从而避免调用LinkResolver::resolve_invoke
